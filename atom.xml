<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-20T12:40:51.526Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangyaoqin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>stm32 I/O口的八种工作模式</title>
    <link href="http://yoursite.com/posts/33448/"/>
    <id>http://yoursite.com/posts/33448/</id>
    <published>2019-03-20T11:39:04.000Z</published>
    <updated>2019-03-20T12:40:51.526Z</updated>
    
    <content type="html"><![CDATA[<p>stm32 I/O口有8种工作模式，分别为4种输入模式和4种输出模式：</p><p>4种输入模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）GPIO_Mode_AIN 模拟输入 </span><br><span class="line">（2）GPIO_Mode_IN_FLOATING 浮空输入 </span><br><span class="line">（3）GPIO_Mode_IPD 下拉输入 </span><br><span class="line">（4）GPIO_Mode_IPU 上拉输入</span><br></pre></td></tr></table></figure><a id="more"></a><p>4种输出模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（5）GPIO_Mode_Out_OD 开漏输出 </span><br><span class="line">（6）GPIO_Mode_Out_PP 推挽输出 </span><br><span class="line">（7）GPIO_Mode_AF_OD 复用开漏输出 </span><br><span class="line">（8）GPIO_Mode_AF_PP 复用推挽输出</span><br></pre></td></tr></table></figure><p>那么这8种工作模式具体的含义是什么呢？</p><p>浮空,顾名思义就是浮在空中,上面用绳子一拉就上去了,下面用绳子一拉就沉下去了.  </p><p>开漏,就等于输出口接了个NPN三极管,并且只接了e,b. c极 是开路的,你可以接一个电阻到3.3V,也可以接一个电阻到5V,这样,在输出1的时候,就可以是5V电压,也可以是3.3V电压了.但是不接电阻上拉的时候,这个输出高就不能实现了.  </p><p>推挽,就是有推有拉,任何时候IO口的电平都是确定的,不需要外接上拉或者下拉电阻. </p><hr><p>推挽电路是两个参数相同的三极管或MOSFET,以推挽方式存在于电路中,各负责正负半周的波形放大任务,电路工作时，两只对称的功率开关管每次只有一个导通，所以导通损耗小、效率高。输出既可以向负载灌电流，也可以从负载抽取电流。推拉式输出级既提高电路的负载能力，又提高开关速度。 </p><p>开漏输出:输出端相当于三极管的集电极. 要得到高电平状态需要上拉电阻才行. 适合于做电流型的驱动,其吸收电流的能力相对强(一般20ma以内).<br>开漏形式的电路有以下几个特点： </p><ol><li>利用外部电路的驱动能力，减少IC内部的驱动。当IC内部MOSFET导通时，驱动电流是从外部的VCC流经R pull-up ，MOSFET到GND。IC内部仅需很下的栅极驱动电流。 </li><li>一般来说，开漏是用来连接不同电平的器件，匹配电平用的，因为开漏引脚不连接外部的上拉电阻时，只能输出低电平，如果需要同时具备输出高电平的功能，则需要接上拉电阻，很好的一个优点是通过改变上拉电源的电压，便可以改变传输电平。比如加上上拉电阻就可以提供TTL/CMOS电平输出等。（上拉电阻的阻值决定了逻辑电平转换的沿的速度 。阻值越大，速度越低功耗越小，所以负载电阻的选择要兼顾功耗和速度。） </li><li>OPEN-DRAIN提供了灵活的输出方式，但是也有其弱点，就是带来上升沿的延时。因为上升沿是通过外接上拉无源电阻对负载充电，所以当电阻选择小时延时就小，但功耗大；反之延时大功耗小。所以如果对延时有要求，则建议用下降沿输出。 </li><li>可以将多个开漏输出的Pin，连接到一条线上。通过一只上拉电阻，在不增加任何器件的情况下，形成“与逻辑”关系。这也是I2C，SMBus等总线判断总线占用状态的原理。                                                                                                               补充：什么是“线与”？：<br> 在一个结点(线)上, 连接一个上拉电阻到电源 VCC 或 VDD 和 n 个 NPN 或 NMOS 晶体管的集电极 C 或漏极 D, 这些晶体管的发射极 E 或源极 S 都接到地线上, 只要有一个晶体管饱和, 这个结点(线)就被拉到地线电平上. 因为这些晶体管的基极注入电流(NPN)或栅极加上高电平(NMOS),晶体管就会饱和, 所以这些基极或栅极对这个结点(线)的关系是或非 NOR 逻辑. 如果这个结点后面加一个反相器, 就是或 OR 逻辑.<br> 其实可以简单的理解为：在所有引脚连在一起时，外接一上拉电阻，如果有一个引脚输出为逻辑0，相当于接地，与之并联的回路“相当于被一根导线短路”，所以外电路逻辑电平便为0，只有都为高电平时，与的结果才为逻辑1。 </li></ol><p>由于浮空输入一般多用于外部按键输入，浮空输入状态下，IO的电平状态是不确定的，完全由外部输入决定，如果在该引脚悬空的情况下，读取该端口的电平是不确定的。<br>上拉输入/下拉输入/模拟输入：这几个概念很好理解，从字面便能轻易读懂。<br>复用开漏输出、复用推挽输出：可以理解为GPIO口被用作第二功能时的配置情况（即并非作为通用IO口使用）<br>最后总结下使用情况：<br>在STM32中选用IO模式<br>（1） 浮空输入_IN_FLOATING ——浮空输入，可以做KEY识别，RX1<br>（2）带上拉输入_IPU——IO内部上拉电阻输入<br>（3）带下拉输入_IPD—— IO内部下拉电阻输入<br>（4） 模拟输入_AIN ——应用ADC模拟输入，或者低功耗下省电<br>（5）开漏输出_OUT_OD ——IO输出0接GND，IO输出1，悬空，需要外接上拉电阻，才能实现输出高电平。当输出为1时，IO口的状态由上拉电阻拉高电平，但由于是开漏输出模式，这样IO口也就可以由外部电路改变为低电平或不变。可以读IO输入电平变化，实现C51的IO双向功能<br>（6）推挽输出_OUT_PP ——IO输出0-接GND， IO输出1 -接VCC，读输入值是未知的<br>（7）复用功能的推挽输出_AF_PP ——片内外设功能（I2C的SCL,SDA）<br>（8）复用功能的开漏输出_AF_OD——片内外设功能（TX1,MOSI,MISO.SCK.SS）<br>STM32设置实例：<br>（1）模拟I2C使用开漏输出_OUT_OD，接上拉电阻，能够正确输出0和1；读值时先GPIO_SetBits(GPIOB, GPIO_Pin_0)；拉高，然后可以读IO的值；使用GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0)；<br>（2）如果是无上拉电阻，IO默认是高电平；需要读取IO的值，可以使用带上拉输入_IPU和浮空输入_IN_FLOATING和开漏输出_OUT_OD；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;stm32 I/O口有8种工作模式，分别为4种输入模式和4种输出模式：&lt;/p&gt;
&lt;p&gt;4种输入模式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;（1）GPIO_Mode_AIN 模拟输入 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（2）GPIO_Mode_IN_FLOATING 浮空输入 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（3）GPIO_Mode_IPD 下拉输入 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（4）GPIO_Mode_IPU 上拉输入&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="stm32" scheme="http://yoursite.com/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>断言</title>
    <link href="http://yoursite.com/posts/58240/"/>
    <id>http://yoursite.com/posts/58240/</id>
    <published>2019-03-17T15:10:42.000Z</published>
    <updated>2019-03-20T11:40:09.199Z</updated>
    
    <content type="html"><![CDATA[<p>​         阅读GPIO_Init源码时，发现断言函数 assert，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* Check the parameters */</span><br><span class="line">assert_param(IS_GPIO_ALL_PERIPH(GPIOx));</span><br><span class="line">assert_param(IS_GPIO_MODE(GPIO_InitStruct-&gt;GPIO_Mode));</span><br><span class="line">assert_param(IS_GPIO_PIN(GPIO_InitStruct-&gt;GPIO_Pin));</span><br></pre></td></tr></table></figure><p>​        为了能深入的理解断言在程序运行中的作用，我尝试对断言进行总结。在使用C语言编写工程代码时，我们总会对某种假设条件进行检查，断言就是用于在代码中捕捉这些假设，可以将断言看作是异常处理的一种高级形式。然而assert并不仅仅是一个报错函数，事实上它还是一个宏。</p><a id="more"></a><p>​       断言表示为一些布尔表达式，程序员相信在程序中的某个特定点该表达式值为真。可以在任何时候启用和禁用断言验证，因此可以在测试时启用断言，而在部署时禁用断言。同样，程序投入运行后，最终用户在遇到问题时可以重新起用断言。它可以快速发现并定位软件问题，同时对系统错误进行自动报警。断言可以对在系统中隐藏很深，用其它手段极难发现的问题可以用断言来进行定位，从而缩短软件问题定位时间，提高系统的可测性。实际应用时，可根据具体情况灵活地设计断言。</p><p>​        原型定义：void assert( int expression );</p><p>​       assert宏的原型定义在&lt;assert.h&gt;中，其作用是先计算表达式 expression ，如果expression的值为假（即为0），那么它首先打印一条出错信息，然后通过调用abort 来终止程序运行。下面来看看一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;assert.h&gt;</span><br><span class="line"></span><br><span class="line">int main( void )</span><br><span class="line">&#123;</span><br><span class="line">   int i;</span><br><span class="line">   i=1;</span><br><span class="line">   assert(i++);</span><br><span class="line">   printf(&quot;%d\n&quot;,i);</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       因为我们给定的i初始值为1，所以使用assert(i++);语句的时候不会出现错误，进而执行了i++，所以其后的打印语句输出值为2。如果我们把i的初始值改为0，那么就回出现如下错误。<br>Assertion failed: i++, file E:\fdsa\assert2.cpp, line 8<br>Press any key to continue</p><p>​       断言语句不是永远会执行，可以屏蔽也可以启用，这就要求assert不管是在屏蔽还是启用的情况下都不能对我们本身代码的功能有所影响，这样的话刚才我们在代码中使用了一句assert(i++);是不妥的，因为我们一旦禁用了assert，i++的语句就得不到执行，对于接下来i值的使用就会出现问题了，所以对于这样的语句我们应该是要分开来实现，写出如下两句来替代， assert(i); i++;，所以这就对于断言的使用有了相应的要求，那么我们一般在什么情况下使用断言呢？主要体现在一下几个方面：</p><p>​           1.可以在预计正常情况下程序不会到达的地方放置断言。（如assert (0);）</p><p>​        2.使用断言测试方法执行的前置条件和后置条件 。</p><p>​        3.使用断言检查类的不变状态，确保任何情况下，某个变量的状态必须满足。（如某个变量的变化范围）</p><p>​       对于上面的前置条件和后置条件可能有的读者还不是很了解，那么看看下面的解释你就明白了。</p><p>​        1.前置条件断言：代码执行之前必须具备的特性</p><p>​        2.后置条件断言：代码执行之后必须具备的特性</p><p>​        3.前后不变断言：代码执行前后不能变化的特性</p><p>​       当然在使用的断言的过程中会有一些我们应该注意的事项和养成一些良好的习惯，如：</p><p>​        1.每个assert只检验一个条件，因为同时检验多个条件时，如果断言失败，我们就无法直观的判断是哪个条件失败</p><p>​        2.不能使用改变环境的语句，就像我们上面的代码改变了i变量，在实际编写代码的过程中是不能这样做的</p><p>​        3.assert和后面的语句应空一行，以形成逻辑和视觉上的一致感，也算是一种良好的编程习惯吧，让编写的代码有一种视觉上的美感</p><p>​        4.有的地方，assert不能代替条件过滤</p><p>​        5.放在函数参数的入口处检查传入参数的合法性</p><p>​        6.断言语句不可以有任何边界效应</p><p>​        7.频繁的调用会极大的影响程序的性能，增加额外的开销。所以在调试结束后，可以通过在包含#include 的语句之前插入 #define NDEBUG 来禁用assert调用。</p><p>​       现在回到GPIO_Init源码中，通过以下2段代码我们可以更好的理解断言在实际开发中的应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert_param(IS_GPIO_ALL_PERIPH(GPIOx));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define IS_GPIO_ALL_PERIPH(PERIPH) (((PERIPH) == GPIOA) || \</span><br><span class="line">                                    ((PERIPH) == GPIOB) || \</span><br><span class="line">                                    ((PERIPH) == GPIOC) || \</span><br><span class="line">                                    ((PERIPH) == GPIOD) || \</span><br><span class="line">                                    ((PERIPH) == GPIOE) || \</span><br><span class="line">                                    ((PERIPH) == GPIOF) || \</span><br><span class="line">                                    ((PERIPH) == GPIOG))</span><br></pre></td></tr></table></figure><p>​      由第二段代码的含参宏，确定传入的参数是否符合要求，这种用法为上述的前置条件断言。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​         阅读GPIO_Init源码时，发现断言函数 assert，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/* Check the parameters */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert_param(IS_GPIO_ALL_PERIPH(GPIOx));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert_param(IS_GPIO_MODE(GPIO_InitStruct-&amp;gt;GPIO_Mode));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert_param(IS_GPIO_PIN(GPIO_InitStruct-&amp;gt;GPIO_Pin));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​        为了能深入的理解断言在程序运行中的作用，我尝试对断言进行总结。在使用C语言编写工程代码时，我们总会对某种假设条件进行检查，断言就是用于在代码中捕捉这些假设，可以将断言看作是异常处理的一种高级形式。然而assert并不仅仅是一个报错函数，事实上它还是一个宏。&lt;/p&gt;
    
    </summary>
    
    
      <category term="stm32" scheme="http://yoursite.com/tags/stm32/"/>
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/posts/16107/"/>
    <id>http://yoursite.com/posts/16107/</id>
    <published>2019-03-17T08:09:04.181Z</published>
    <updated>2019-03-19T15:52:58.444Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本来想把这个初始化的界面删了，后来想想算了，干脆用这个界面来记录建立博客的经过，方便以后参考。</p><p>由于这两天的建站，严重影响自学的进度，就主要记录一些采过的坑吧。</p><a id="more"></a><h3 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p><a href="http://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">使用Hexo+Github一步步搭建属于自己的博客（基础）</a></p><p><a href="http://www.cnblogs.com/fengxiongZz/p/7707568.html" target="_blank" rel="noopener">使用Hexo+Github一步步搭建属于自己的博客（进阶）</a></p><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化</a></p><p><a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><h4 id="博文压缩"><a href="#博文压缩" class="headerlink" title="博文压缩"></a>博文压缩</h4><h5 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h5><p>在站点的根目录下执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp -g</span><br><span class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure><p>进入博客根目录，新建gulpfile.js文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class="line">// 压缩 public 目录 css</span><br><span class="line">gulp.task(&apos;minify-css&apos;, function() &#123;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public 目录 html</span><br><span class="line">gulp.task(&apos;minify-html&apos;, function() &#123;</span><br><span class="line">  return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: true,</span><br><span class="line">         minifyJS: true,</span><br><span class="line">         minifyCSS: true,</span><br><span class="line">         minifyURLs: true,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(&apos;./public&apos;))</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public/js 目录 js</span><br><span class="line">gulp.task(&apos;minify-js&apos;, function() &#123;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.js&apos;)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 执行 gulp 命令时执行的任务</span><br><span class="line">gulp.task(&apos;default&apos;, [</span><br><span class="line">    &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>生成博文是执行 <code>hexo g &amp;&amp; gulp</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 public 目录中的静态资源文件进行压缩。</p><hr><h5 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h5><p>然而，运行 <code>hexo g &amp;&amp; gulp</code> 时，会出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">assert.js:350</span><br><span class="line">    throw err;</span><br><span class="line">    ^</span><br><span class="line"></span><br><span class="line">AssertionError [ERR_ASSERTION]: Task function must be specified</span><br><span class="line">    at Gulp.set [as _setTask] (D:\nodejs\blog\node_modules\undertaker\lib\set-task.js:10:3)</span><br><span class="line">    at Gulp.task (D:\nodejs\blog\node_modules\undertaker\lib\task.js:13:8)</span><br><span class="line">    at Object.&lt;anonymous&gt; (D:\nodejs\blog\gulpfile.js:31:6)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:701:30)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:712:10)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:600:32)</span><br><span class="line">    at tryModuleLoad (internal/modules/cjs/loader.js:539:12)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:531:3)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:637:17)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:22:18)</span><br></pre></td></tr></table></figure><p>gulp项目需要全局安装gulp和项目内安装gulp，通过 gulp -v 查看全局gulp 和本地项目的gulp版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gulp -v</span><br><span class="line">[22:12:41] CLI version 2.0.1</span><br><span class="line">[22:12:41] Local version 4.0.0</span><br></pre></td></tr></table></figure><p>查看项目里的D:\nodejs\blog\package.json文件，可以看到gulp版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-core&quot;: &quot;^6.26.3&quot;,</span><br><span class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;,</span><br><span class="line">    &quot;del&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">    &quot;gulp&quot;: &quot;^4.0.1&quot;,</span><br><span class="line">    &quot;gulp-babel&quot;: &quot;^8.0.0&quot;,</span><br><span class="line">    &quot;gulp-clean-css&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">    &quot;gulp-htmlclean&quot;: &quot;^2.7.22&quot;,</span><br><span class="line">    &quot;gulp-htmlmin&quot;: &quot;^5.0.1&quot;,</span><br><span class="line">    &quot;gulp-imagemin&quot;: &quot;^5.0.3&quot;,</span><br><span class="line">    &quot;gulp-uglify&quot;: &quot;^3.0.2&quot;,</span><br><span class="line">    &quot;run-sequence&quot;: &quot;^2.2.1&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>将 <code>&quot;gulp&quot;: &quot;^4.0.1&quot;,</code>改成 <code>&quot;gulp&quot;: &quot;^2.0.1&quot;,</code>发现出现错误<code>Unsupported gulp version</code></p><p>将版本号从gulp2改成改成gulp3<code>&quot;gulp&quot;: &quot;^2.0.1&quot;</code>，成功。</p><h4 id="鼠标飘字特效"><a href="#鼠标飘字特效" class="headerlink" title="鼠标飘字特效"></a>鼠标飘字特效</h4><h5 id="教程-1"><a href="#教程-1" class="headerlink" title="教程"></a>教程</h5><p>新建一个js：*/themes/next/source/js/src/jiazhiguan.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/* 鼠标飘字*/</span><br><span class="line">var a_idx = 0;</span><br><span class="line">jQuery(document).ready(function($) &#123;</span><br><span class="line">$(&quot;body&quot;).click(function(e) &#123;</span><br><span class="line">var a = new Array(&quot;富强&quot;, &quot;民主&quot;, &quot;文明&quot;, &quot;和谐&quot;, &quot;自由&quot;, &quot;平等&quot;, &quot;公正&quot; ,&quot;法治&quot;, &quot;爱国&quot;, &quot;敬业&quot;, &quot;诚信&quot;, &quot;友善&quot;);</span><br><span class="line">var $i = $(&quot;&lt;span/&gt;&quot;).text(a[a_idx]);</span><br><span class="line">a_idx = (a_idx + 1) % a.length;</span><br><span class="line">var x = e.pageX,</span><br><span class="line">y = e.pageY;</span><br><span class="line">$i.css(&#123;</span><br><span class="line">&quot;z-index&quot;: 999999999999999999999999999999999999999999999999999999999999999999999,</span><br><span class="line">&quot;top&quot;: y - 20,</span><br><span class="line">&quot;left&quot;: x,</span><br><span class="line">&quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">&quot;font-weight&quot;: &quot;bold&quot;,</span><br><span class="line">&quot;color&quot;: &quot;#a40000&quot;</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;body&quot;).append($i);</span><br><span class="line">$i.animate(&#123;</span><br><span class="line">&quot;top&quot;: y - 180,</span><br><span class="line">&quot;opacity&quot;: 0</span><br><span class="line">&#125;,</span><br><span class="line">1500,</span><br><span class="line">function() &#123;</span><br><span class="line">$i.remove();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在<code>Blog\themes\next\layout\_layout.swig</code>文件的最下方，<code>&lt;/body&gt;</code>前面添加<code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/jiazhiguan.js&quot;&gt;&lt;/script&gt;</code>。</p><hr><h5 id="填坑-1"><a href="#填坑-1" class="headerlink" title="填坑"></a>填坑</h5><p>由于ANSI编码无中文字符，所以出现乱码。将编码从ANSI改成utf-8编码。</p><p>用记事本打开这个1.html，把这文档另存到原来的目录，覆盖自己，只是编码要从ANSI改成utf-8。完成。</p><h4 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h4><p>打开<code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code>文件,在pace段后面插入这样一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (function () &#123;</span><br><span class="line">        if (&apos;&#123;&#123; page.password &#125;&#125;&apos;) &#123;</span><br><span class="line">            if (prompt(&apos;请输入文章密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;) &#123;</span><br><span class="line">                alert(&apos;密码错误！&apos;);</span><br><span class="line">                if (history.length === 1) &#123;</span><br><span class="line">                    location.replace(&quot;http://xxxxxxx.xxx&quot;); // 这里替换成你的首页</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    history.back();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后在文章上写成类似这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 断言</span><br><span class="line">tags:</span><br><span class="line">  - C语言</span><br><span class="line">  - stm32</span><br><span class="line">abbrlink: 58240</span><br><span class="line">date: 2019-03-17 23:10:42</span><br><span class="line">password: ********</span><br></pre></td></tr></table></figure><h4 id="待续。。"><a href="#待续。。" class="headerlink" title="待续。。"></a>待续。。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本来想把这个初始化的界面删了，后来想想算了，干脆用这个界面来记录建立博客的经过，方便以后参考。&lt;/p&gt;
&lt;p&gt;由于这两天的建站，严重影响自学的进度，就主要记录一些采过的坑吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
