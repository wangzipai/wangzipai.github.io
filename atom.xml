<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Santos</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangzipai.github.io/"/>
  <updated>2019-03-25T11:54:41.616Z</updated>
  <id>https://wangzipai.github.io/</id>
  
  <author>
    <name>wangyaoqin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>stm32蜂鸣器实验总结</title>
    <link href="https://wangzipai.github.io/posts/31496/"/>
    <id>https://wangzipai.github.io/posts/31496/</id>
    <published>2019-03-24T12:18:21.000Z</published>
    <updated>2019-03-25T11:54:41.616Z</updated>
    
    <content type="html"><![CDATA[<p>由于家境贫寒只买得起mini版的缘故，关于蜂鸣器的实验只能另外买蜂鸣器外设来做实验了。也因此蜂鸣器所使用的IO口可以自定义，并不一定只能用PB.8来做实验。实验中出现了一些小问题，记录下来，以便之后的复习。</p><a id="more"></a><p>首先是在写beef.c的时候，变量的声明放在了可执行语句的后面。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beep.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BEEP_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">     RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);</span><br><span class="line">    </span><br><span class="line">     GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    </span><br><span class="line">     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;</span><br><span class="line">     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">     GPIO_Init(GPIOB,&amp;GPIO_InitStructure);</span><br><span class="line">     </span><br><span class="line">     GPIO_ResetBits(GPIOB,GPIO_Pin_8);</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用MDK调试的时候，出现以下错误：</p><p><code>error: #268: declaration may not appear after executablestatement</code></p><p>修改为：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include "beep.h"</span></span><br><span class="line"><span class="comment">#include "stm32f10x.h"</span></span><br><span class="line"></span><br><span class="line">void <span class="keyword">BEEP_Init(void)&#123;</span></span><br><span class="line"><span class="keyword"> </span>    GPIO_InitTypeDef GPIO_InitStructure<span class="comment">;</span></span><br><span class="line">     </span><br><span class="line">     RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE)<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8<span class="comment">;</span></span><br><span class="line">     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz<span class="comment">;</span></span><br><span class="line">     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP<span class="comment">;</span></span><br><span class="line">     GPIO_Init(GPIOB,&amp;GPIO_InitStructure)<span class="comment">;</span></span><br><span class="line">     </span><br><span class="line">     GPIO_ResetBits(GPIOB,GPIO_Pin_8)<span class="comment">;</span></span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译通过。</p><p>第二个错误是误把<code>RCC_APB2PeriphClockCmd</code>写成<code>RCC_APB2PeriphResetCmd</code>，由于这两个函数前后一样，且<code>RCC_APB2PeriphResetCmd</code>函数在更显眼的地方，以后要注意。</p><p>接下来是关于蜂鸣器实验的一些总结。</p><p>蜂鸣器是一种一体化结构的电子讯响器，采用直流电压供电。STM32 开发板板载的蜂鸣器是电磁式的有源蜂鸣器。这里的有源不是指电源的“源”，而是指有没有自带震荡电路，有源蜂鸣器自带了震荡电路，一通电就会发声；无源蜂鸣器则没有自带震荡电路，必须外部提供2~5Khz 左右的方波驱动，才能发声。</p><p>STM32 的单个 IO 最大可以提供 25mA 电流（来自数据手册），而蜂鸣器的驱动电流是 30mA 左右，两者十分相近，但是全盘考虑，STM32 整个芯片的电流，最大也就 150mA，如果用 IO 口直接驱动蜂鸣器，其他地方用电就得省着点了…所以，我们不用 STM32 的 IO 直接驱动蜂鸣器，而是通过三极管扩流后再驱动蜂鸣器，这样<br>STM32 的 IO 只需要提供不到 1mA 的电流就足够了。</p><p>蜂鸣器与 STM32 连接原理图 ：</p><p><img src="//wangzipai.github.io/posts/31496/beef.png" alt="beef"></p><p>图中我们用到一个 NPN 三极管（S8050）来驱动蜂鸣器，R38 主要用于防止蜂鸣器的误发声。当 PB.8 输出高电平的时候，蜂鸣器将发声，当 PB.8 输出低电平的时候，蜂鸣器停止发声。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于家境贫寒只买得起mini版的缘故，关于蜂鸣器的实验只能另外买蜂鸣器外设来做实验了。也因此蜂鸣器所使用的IO口可以自定义，并不一定只能用PB.8来做实验。实验中出现了一些小问题，记录下来，以便之后的复习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="stm32" scheme="https://wangzipai.github.io/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>stm32的3种开发方式</title>
    <link href="https://wangzipai.github.io/posts/31616/"/>
    <id>https://wangzipai.github.io/posts/31616/</id>
    <published>2019-03-24T04:57:32.000Z</published>
    <updated>2019-03-24T11:35:18.978Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>stm32有3种不同的开发方式，库函数开发，基于寄存器开发与位带操作。3种方式各有优劣，这里我简单的写一下自己的看法吧。</p><p>在51单片机的程序开发中，我们直接配置寄存器。因为51的功能相对比较简单，对应的寄存器也比较少，所以可以通过配置寄存器的方式开发。到了stm32中，虽然原理相同，但功能多了非常多，寄存器也相对的多了，这时想象51一样记住每个寄存器是不可能的。这时ST公司提供了库函数，开发者只需调用这些函数接口来配置寄存器。</p><p>而这3种方式，本质上都是通过不同的途径，最终实现对相应寄存器的配置。</p><a id="more"></a><h3 id="基于寄存器开发"><a href="#基于寄存器开发" class="headerlink" title="基于寄存器开发"></a>基于寄存器开发</h3><p>直接配置寄存器，可以更直观的了解配置的是那些寄存器以及是如何配置的，同时运行程序是占用资源也更少，代码更加简洁。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void LED_Init(void)&#123;</span><br><span class="line"></span><br><span class="line"> RCC-&gt;APB2ENR|<span class="type">=1</span>&lt;&lt;<span class="number">2</span>;</span><br><span class="line"> RCC-&gt;APB2ENR|<span class="type">=1</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"> //GPIOA<span class="number">.8</span></span><br><span class="line"> GPIOA-&gt;CRH&amp;=<span class="number">0XFFFFFFF0</span>;</span><br><span class="line"> GPIOA-&gt;CRH|<span class="type">=0X00000003</span>;</span><br><span class="line"> GPIOA-&gt;ODR|<span class="type">=1</span>&lt;&lt;<span class="number">8</span>;</span><br><span class="line"> //GPIOD<span class="number">.2</span></span><br><span class="line"> GPIOD-&gt;CRL&amp;=<span class="number">0XFFFFF0FF</span>;</span><br><span class="line"> GPIOD-&gt;CRL|<span class="type">=0X00000300</span>;</span><br><span class="line"> GPIOD-&gt;ODR|<span class="type">=1</span>&lt;&lt;<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的方式是内核执行效率最高的方式，然而由于寄存器数量和复杂度的增加，直接配置寄存器的开发速度和程序可读性就下降。</p><h3 id="库函数开发"><a href="#库函数开发" class="headerlink" title="库函数开发"></a>库函数开发</h3><p>库的本质就是建立一个新的软件抽象层，分层使得问题变得简单，屏蔽了底层实现方式的差异，让软件开发变成简单的调用函数。</p><p>从内核的执行效率来看，首先库函数在被调用的时候，要耗费调用的时间，在函数内部，把输入参数转换成直接写入到寄存器的值也耗费了一些运算时间。优点是可以快速上手stm32微控制器，交流方便，查错简单。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void LED_Init (void)</span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    </span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOD,ENABLE);</span><br><span class="line">    </span><br><span class="line">    GPIO_InitStructure.<span class="attribute">GPIO_Mode</span>=GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.<span class="attribute">GPIO_Pin</span>=GPIO_Pin_8;</span><br><span class="line">    GPIO_InitStructure.<span class="attribute">GPIO_Speed</span>=GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">    GPIO_SetBits(GPIOA,GPIO_Pin_8);</span><br><span class="line">    </span><br><span class="line">    GPIO_InitStructure.<span class="attribute">GPIO_Mode</span>=GPIO_Mode_Out_PP;</span><br><span class="line">    GPIO_InitStructure.<span class="attribute">GPIO_Pin</span>=GPIO_Pin_2;</span><br><span class="line">    GPIO_InitStructure.<span class="attribute">GPIO_Speed</span>=GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOD,&amp;GPIO_InitStructure);</span><br><span class="line">    GPIO_SetBits(GPIOD,GPIO_Pin_2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="位带操作（记得引入sys-h头文件）"><a href="#位带操作（记得引入sys-h头文件）" class="headerlink" title="位带操作（记得引入sys.h头文件）"></a>位带操作（记得引入sys.h头文件）</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>把每个比特膨胀为一个32位的字，当访问这些字的时候就达到了访问比特的目的，比如说BSRR寄存器有32个位，那么可以映射到32个地址上，我们去访问（读-改-写）这32个地址就达到访问32个比特的目的。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>对硬件I/O密集型的底层程序提供了很大方便，使代码更加简洁。化简跳转的判断。在多任务中实现共享资源在任务间的“互锁”访问。</p><h4 id="支持区域"><a href="#支持区域" class="headerlink" title="支持区域"></a>支持区域</h4><p>其中一个是 SRAM 区的最低 1MB 范围，0x20000000 ‐ 0x200FFFFF（SRAM   区中的最低 1MB）</p><p>第二个则是片内外设区的最低 1MB范围，0x40000000 ‐ 0x400FFFFF（片上外设区中最低 1MB）</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#define LED0 PAout(<span class="number">8</span>)<span class="comment">// PA8</span></span><br><span class="line">#define LED1 PDout(<span class="number">2</span>)<span class="comment">// PD2</span></span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    Stm32_Clock_Init(<span class="number">9</span>); <span class="comment">//系统时钟设置</span></span><br><span class="line">    delay_init(<span class="number">72</span>);     <span class="comment">//延时初始化</span></span><br><span class="line">    LED_Init();   <span class="comment">//初始化与LED连接的硬件接口    </span></span><br><span class="line">    while(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LED0=<span class="number">0</span>;</span><br><span class="line">        LED1=<span class="number">1</span>;</span><br><span class="line">        delay_ms(<span class="number">300</span>);</span><br><span class="line">        LED0=<span class="number">1</span>;</span><br><span class="line">        LED1=<span class="number">0</span>;</span><br><span class="line">        delay_ms(<span class="number">300</span>);</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>随着处理器性能的不断提升，库函数开发会成为趋势，但寄存器可以对原理有更深入的了解。库和寄存器交叉学习，开发用库，然后慢慢深入，加深理解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;stm32有3种不同的开发方式，库函数开发，基于寄存器开发与位带操作。3种方式各有优劣，这里我简单的写一下自己的看法吧。&lt;/p&gt;
&lt;p&gt;在51单片机的程序开发中，我们直接配置寄存器。因为51的功能相对比较简单，对应的寄存器也比较少，所以可以通过配置寄存器的方式开发。到了stm32中，虽然原理相同，但功能多了非常多，寄存器也相对的多了，这时想象51一样记住每个寄存器是不可能的。这时ST公司提供了库函数，开发者只需调用这些函数接口来配置寄存器。&lt;/p&gt;
&lt;p&gt;而这3种方式，本质上都是通过不同的途径，最终实现对相应寄存器的配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="stm32" scheme="https://wangzipai.github.io/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客的玄学加速</title>
    <link href="https://wangzipai.github.io/posts/50535/"/>
    <id>https://wangzipai.github.io/posts/50535/</id>
    <published>2019-03-22T09:56:41.000Z</published>
    <updated>2019-03-22T10:49:28.466Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>利用 InstantClick、hexo-service-worker、hexo-filter-optimize 加速博客</p><h3 id="InstantClick"><a href="#InstantClick" class="headerlink" title="InstantClick"></a>InstantClick</h3><p>InstantClick是一个JavaScript库，可以通过预加载显着加快网站的速度。先下载压缩版的 <a href="http://instantclick.io/v3.1.0/instantclick.min.js" target="_blank" rel="noopener">instantclick.min.js</a>（浏览器右键保存为），再放到<code>~/next/source/js/src/</code>下，然后添加代码：</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>= <span class="string">"/js/src/instantclick.min.js"</span> <span class="attr">data-no-instant</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-no-instant</span>&gt;</span><span class="undefined">InstantClick.init();</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去除顶部加载条：</p><p>在<code>next/source/css/_custom/custom.styl</code>文件添加以下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#instantclick</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hexo-service-worker"><a href="#hexo-service-worker" class="headerlink" title="hexo-service-worker"></a>hexo-service-worker</h4><p>hexo-service-worker 是一个 hexo 用来让博客拥有 Service Worker 功能的插件，能够默认的把站点中 public 内的所有静态资源包括 html 文件缓存起来，达到离线可访问的效果</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> hexo-service-worker --save</span><br></pre></td></tr></table></figure><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><p>安装插件后，直接配置 <code>_config.yml</code> 文件如下就可以了：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># offline config passed to sw-precache.</span></span><br><span class="line"><span class="attr">service_worker:</span></span><br><span class="line"><span class="attr">  maximumFileSizeToCacheInBytes:</span> <span class="number">5242880</span></span><br><span class="line"><span class="attr">  staticFileGlobs:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">public/**/*.&#123;js,html,css,png,jpg,gif,svg,eot,ttf,woff,woff2&#125;</span></span><br><span class="line"><span class="attr">  stripPrefix:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">  verbose:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="hexo-filter-optimize"><a href="#hexo-filter-optimize" class="headerlink" title="hexo-filter-optimize"></a>hexo-filter-optimize</h4><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-filter-<span class="keyword">optimize</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h5 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h5><p>安装插件后，直接配置 <code>_config.yml</code> 文件如下就可以了：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filter_optimize:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># remove static resource query string</span></span><br><span class="line">  <span class="comment">#   - like `?v=1.0.0`</span></span><br><span class="line"><span class="attr">  remove_query_string:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># remove the surrounding comments in each of the bundled files</span></span><br><span class="line"><span class="attr">  remove_comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  css:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># bundle loaded css file into the one</span></span><br><span class="line"><span class="attr">    bundle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># use a script block to load css elements dynamically</span></span><br><span class="line"><span class="attr">    delivery:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># make specific css content inline into the html page</span></span><br><span class="line">    <span class="comment">#   - only support the full path</span></span><br><span class="line">    <span class="comment">#   - default is ['css/main.css']</span></span><br><span class="line"><span class="attr">    inlines:</span></span><br><span class="line"><span class="attr">    excludes:</span></span><br><span class="line"><span class="attr">  js:</span></span><br><span class="line">    <span class="comment"># bundle loaded js file into the one</span></span><br><span class="line"><span class="attr">    bundle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    excludes:</span></span><br><span class="line">  <span class="comment"># set the priority of this plugin,</span></span><br><span class="line">  <span class="comment"># lower means it will be executed first, default is 10</span></span><br><span class="line"><span class="attr">  priority:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="修复网页图标不显示"><a href="#修复网页图标不显示" class="headerlink" title="修复网页图标不显示"></a>修复网页图标不显示</h3><p>在主题配置文件中，让fontawesome 使用 cdn 即可，搜索fontawesome，修改如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Internal version: 4.6.2</span></span><br><span class="line">  <span class="comment"># See: http://fontawesome.io/</span></span><br><span class="line">  fontawesome: http:<span class="regexp">//m</span>axcdn.bootstrapcdn.com<span class="regexp">/font-awesome/</span><span class="number">4.6</span>.<span class="number">2</span><span class="regexp">/css/</span>font-awesome.min.css</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;利用 InstantClick、hexo-service-worker、hexo-filter-optimize 加速博客&lt;/p&gt;
&lt;h3 id=&quot;InstantClick&quot;&gt;&lt;a href=&quot;#InstantClick&quot; class=&quot;headerlink&quot; title=&quot;InstantClick&quot;&gt;&lt;/a&gt;InstantClick&lt;/h3&gt;&lt;p&gt;InstantClick是一个JavaScript库，可以通过预加载显着加快网站的速度。先下载压缩版的 &lt;a href=&quot;http://instantclick.io/v3.1.0/instantclick.min.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;instantclick.min.js&lt;/a&gt;（浏览器右键保存为），再放到&lt;code&gt;~/next/source/js/src/&lt;/code&gt;下，然后添加代码：&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://wangzipai.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>GPIO_Init源码及注释</title>
    <link href="https://wangzipai.github.io/posts/53676/"/>
    <id>https://wangzipai.github.io/posts/53676/</id>
    <published>2019-03-20T15:26:08.000Z</published>
    <updated>2019-03-22T18:26:53.328Z</updated>
    
    <content type="html"><![CDATA[<h4 id="GPIO-Init源码及注释"><a href="#GPIO-Init源码及注释" class="headerlink" title="GPIO_Init源码及注释"></a>GPIO_Init源码及注释</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_Init</span><span class="params">(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)</span><span class="comment">//把GPIOx的地址转换为GPIO_TypeDef结构体指针类型</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> currentmode = <span class="number">0x00</span>, currentpin = <span class="number">0x00</span>, pinpos = <span class="number">0x00</span>, pos = <span class="number">0x00</span>;</span><br><span class="line">  <span class="keyword">uint32_t</span> tmpreg = <span class="number">0x00</span>, pinmask = <span class="number">0x00</span>;</span><br><span class="line">  <span class="comment">/* 断言，用于检查输入的参数是否正确 */</span></span><br><span class="line">  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));</span><br><span class="line">  assert_param(IS_GPIO_MODE(GPIO_InitStruct-&gt;GPIO_Mode));</span><br><span class="line">  assert_param(IS_GPIO_PIN(GPIO_InitStruct-&gt;GPIO_Pin));  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/*---------------------------- GPIO的模式配置 -----------------------*/</span></span><br><span class="line"><span class="comment">/*把输入参数GPIO_Mode的低四位暂存在currentmode*/</span></span><br><span class="line">  currentmode = ((<span class="keyword">uint32_t</span>)GPIO_InitStruct-&gt;GPIO_Mode) &amp; ((<span class="keyword">uint32_t</span>)<span class="number">0x0F</span>);</span><br><span class="line"><span class="comment">/*判断是否为输出模式，若是输出模式，可输入参数中输出模式的bit4位都是1</span></span><br><span class="line"><span class="comment">typedef enum</span></span><br><span class="line"><span class="comment">&#123; GPIO_Mode_AIN = 0x0,</span></span><br><span class="line"><span class="comment">  GPIO_Mode_IN_FLOATING = 0x04,</span></span><br><span class="line"><span class="comment">  GPIO_Mode_IPD = 0x28,</span></span><br><span class="line"><span class="comment">  GPIO_Mode_IPU = 0x48,</span></span><br><span class="line"><span class="comment">  GPIO_Mode_Out_OD = 0x14,</span></span><br><span class="line"><span class="comment">  GPIO_Mode_Out_PP = 0x10,</span></span><br><span class="line"><span class="comment">  GPIO_Mode_AF_OD = 0x1C,</span></span><br><span class="line"><span class="comment">  GPIO_Mode_AF_PP = 0x18</span></span><br><span class="line"><span class="comment">&#125;GPIOMode_TypeDef;</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">  <span class="keyword">if</span> ((((<span class="keyword">uint32_t</span>)GPIO_InitStruct-&gt;GPIO_Mode) &amp; ((<span class="keyword">uint32_t</span>)<span class="number">0x10</span>)) != <span class="number">0x00</span>)</span><br><span class="line">  &#123; </span><br><span class="line">    <span class="comment">/* 检查输入参数 */</span></span><br><span class="line">    assert_param(IS_GPIO_SPEED(GPIO_InitStruct-&gt;GPIO_Speed));</span><br><span class="line">    <span class="comment">/* 输出模式，所以要配置GPIO的速率（00（输入模式） 01（10MHz）） 10（2MHz） 11(20MHz) */</span></span><br><span class="line">    currentmode |= (<span class="keyword">uint32_t</span>)GPIO_InitStruct-&gt;GPIO_Speed;</span><br><span class="line">  &#125;<span class="comment">//GPIO_Mode的低四位分别为0000，0100，1000，1100.对速率无影响</span></span><br><span class="line"><span class="comment">/*---------------------------- 配置GPIO的CRL寄存器 ------------------------*/</span></span><br><span class="line">  <span class="comment">/* 判断要配置的是否为pin0~pin7*/</span></span><br><span class="line"><span class="comment">/*#define GPIO_Pin_0    ((uint16_t)0x0001)  /*!&lt; Pin 0 selected */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_1      ((uint16_t)0x0002)  <span class="comment">/*!&lt; Pin 1 selected */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_2      ((uint16_t)0x0004)  <span class="comment">/*!&lt; Pin 2 selected */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_3      ((uint16_t)0x0008)  <span class="comment">/*!&lt; Pin 3 selected */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_4      ((uint16_t)0x0010)  <span class="comment">/*!&lt; Pin 4 selected */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_5      ((uint16_t)0x0020)  <span class="comment">/*!&lt; Pin 5 selected */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_6      ((uint16_t)0x0040)  <span class="comment">/*!&lt; Pin 6 selected */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_7      ((uint16_t)0x0080)  <span class="comment">/*!&lt; Pin 7 selected */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_8      ((uint16_t)0x0100)  <span class="comment">/*!&lt; Pin 8 selected */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_9      ((uint16_t)0x0200)  <span class="comment">/*!&lt; Pin 9 selected */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_10     ((uint16_t)0x0400)  <span class="comment">/*!&lt; Pin 10 selected*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_11     ((uint16_t)0x0800)  <span class="comment">/*!&lt; Pin 11 selected*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_12     ((uint16_t)0x1000)  <span class="comment">/*!&lt; Pin 12 selected*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_13     ((uint16_t)0x2000)  <span class="comment">/*!&lt; Pin 13 selected*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_14     ((uint16_t)0x4000)  <span class="comment">/*!&lt; Pin 14 selected*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_15     ((uint16_t)0x8000)  <span class="comment">/*!&lt; Pin 15 selected*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_Pin_All    ((uint16_t)0xFFFF)  <span class="comment">/*!&lt; All pins selected */</span></span></span><br><span class="line">  */</span><br><span class="line">  <span class="keyword">if</span> (((<span class="keyword">uint32_t</span>)GPIO_InitStruct-&gt;GPIO_Pin &amp; ((<span class="keyword">uint32_t</span>)<span class="number">0x00FF</span>)) != <span class="number">0x00</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/*备份原CRL寄存器的值*/</span></span><br><span class="line">    tmpreg = GPIOx-&gt;CRL;</span><br><span class="line">    <span class="comment">/*循环，一个循环设置一个寄存器位*/</span></span><br><span class="line">    <span class="keyword">for</span> (pinpos = <span class="number">0x00</span>; pinpos &lt; <span class="number">0x08</span>; pinpos++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">/*pos的值为1左移pinpos位*/</span></span><br><span class="line">      pos = ((<span class="keyword">uint32_t</span>)<span class="number">0x01</span>) &lt;&lt; pinpos;</span><br><span class="line">      <span class="comment">/* 令pos与输入参数GPIO_PIN做位与运算，为下面的判断做准备 */</span></span><br><span class="line">      currentpin = (GPIO_InitStruct-&gt;GPIO_Pin) &amp; pos;</span><br><span class="line">      <span class="comment">/*判断，若currentpin等于pos，说明GPIO_PIN参数中含的第pos个引脚需要配置*/</span></span><br><span class="line">      <span class="keyword">if</span> (currentpin == pos)</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="comment">/*pos的值左移2位（乘以4），因为寄存器中4个寄存器位配置一个引脚*/</span></span><br><span class="line">        pos = pinpos &lt;&lt; <span class="number">2</span>;</span><br><span class="line">      <span class="comment">/*以下两个句子，把控制这个引脚的4个寄存器位清零，其他寄存器位不变*/</span>  </span><br><span class="line">        <span class="comment">/* Clear the corresponding low control register bits */</span></span><br><span class="line">        pinmask = ((<span class="keyword">uint32_t</span>)<span class="number">0x0F</span>) &lt;&lt; pos;</span><br><span class="line">        tmpreg &amp;= ~pinmask;</span><br><span class="line">        <span class="comment">/* 向寄存器写入将要配置的引脚模式 */</span></span><br><span class="line">        tmpreg |= (currentmode &lt;&lt; pos);</span><br><span class="line">        <span class="comment">/* 复位GPIO引脚的输入输出默认值 */</span></span><br><span class="line">        <span class="comment">/* 判断是否为下拉输入模式 */</span></span><br><span class="line">        <span class="keyword">if</span> (GPIO_InitStruct-&gt;GPIO_Mode == GPIO_Mode_IPD)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">/*下拉输入模式，引脚默认置0，对BRR寄存器写1可对引脚置零*/</span></span><br><span class="line">          GPIOx-&gt;BRR = (((<span class="keyword">uint32_t</span>)<span class="number">0x01</span>) &lt;&lt; pinpos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">/* 判断是否为上拉输入模式 */</span></span><br><span class="line">          <span class="keyword">if</span> (GPIO_InitStruct-&gt;GPIO_Mode == GPIO_Mode_IPU)</span><br><span class="line">          &#123;</span><br><span class="line">        <span class="comment">/*上拉输入模式，引脚默认置1，对BSRR寄存器写1可对引脚置1*/</span></span><br><span class="line">            GPIOx-&gt;BSRR = (((<span class="keyword">uint32_t</span>)<span class="number">0x01</span>) &lt;&lt; pinpos);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*把前面处理后的暂存值写入CRL寄存器之中*/</span></span><br><span class="line">    GPIOx-&gt;CRL = tmpreg;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/*---------------------------- GPIO CRH Configuration ------------------------*/</span></span><br><span class="line">  <span class="comment">/* Configure the eight high port pins */</span></span><br><span class="line">  <span class="keyword">if</span> (GPIO_InitStruct-&gt;GPIO_Pin &gt; <span class="number">0x00FF</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    tmpreg = GPIOx-&gt;CRH;</span><br><span class="line">    <span class="keyword">for</span> (pinpos = <span class="number">0x00</span>; pinpos &lt; <span class="number">0x08</span>; pinpos++)</span><br><span class="line">    &#123;</span><br><span class="line">      pos = (((<span class="keyword">uint32_t</span>)<span class="number">0x01</span>) &lt;&lt; (pinpos + <span class="number">0x08</span>));</span><br><span class="line">      <span class="comment">/* Get the port pins position */</span></span><br><span class="line">      currentpin = ((GPIO_InitStruct-&gt;GPIO_Pin) &amp; pos);</span><br><span class="line">      <span class="keyword">if</span> (currentpin == pos)</span><br><span class="line">      &#123;</span><br><span class="line">        pos = pinpos &lt;&lt; <span class="number">2</span>;</span><br><span class="line">        <span class="comment">/* Clear the corresponding high control register bits */</span></span><br><span class="line">        pinmask = ((<span class="keyword">uint32_t</span>)<span class="number">0x0F</span>) &lt;&lt; pos;</span><br><span class="line">        tmpreg &amp;= ~pinmask;</span><br><span class="line">        <span class="comment">/* Write the mode configuration in the corresponding bits */</span></span><br><span class="line">        tmpreg |= (currentmode &lt;&lt; pos);</span><br><span class="line">        <span class="comment">/* Reset the corresponding ODR bit */</span></span><br><span class="line">        <span class="keyword">if</span> (GPIO_InitStruct-&gt;GPIO_Mode == GPIO_Mode_IPD)</span><br><span class="line">        &#123;</span><br><span class="line">          GPIOx-&gt;BRR = (((<span class="keyword">uint32_t</span>)<span class="number">0x01</span>) &lt;&lt; (pinpos + <span class="number">0x08</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* Set the corresponding ODR bit */</span></span><br><span class="line">        <span class="keyword">if</span> (GPIO_InitStruct-&gt;GPIO_Mode == GPIO_Mode_IPU)</span><br><span class="line">        &#123;</span><br><span class="line">          GPIOx-&gt;BSRR = (((<span class="keyword">uint32_t</span>)<span class="number">0x01</span>) &lt;&lt; (pinpos + <span class="number">0x08</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    GPIOx-&gt;CRH = tmpreg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;GPIO-Init源码及注释&quot;&gt;&lt;a href=&quot;#GPIO-Init源码及注释&quot; class=&quot;headerlink&quot; title=&quot;GPIO_Init源码及注释&quot;&gt;&lt;/a&gt;GPIO_Init源码及注释&lt;/h4&gt;
    
    </summary>
    
    
      <category term="stm32" scheme="https://wangzipai.github.io/tags/stm32/"/>
    
      <category term="C语言" scheme="https://wangzipai.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>stm32 I/O口的八种工作模式</title>
    <link href="https://wangzipai.github.io/posts/33448/"/>
    <id>https://wangzipai.github.io/posts/33448/</id>
    <published>2019-03-20T11:39:04.000Z</published>
    <updated>2019-03-25T11:46:24.782Z</updated>
    
    <content type="html"><![CDATA[<p>stm32 I/O口有8种工作模式，分别为4种输入模式和4种输出模式：</p><p>4种输入模式：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）GPIO_Mode_AIN 模拟输入 </span><br><span class="line">（<span class="number">2</span>）GPIO_Mode_IN_FLOATING 浮空输入 </span><br><span class="line">（<span class="number">3</span>）GPIO_Mode_IPD 下拉输入 </span><br><span class="line">（<span class="number">4</span>）GPIO_Mode_IPU 上拉输入</span><br></pre></td></tr></table></figure><a id="more"></a><p>4种输出模式：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">5</span>）GPIO_Mode_Out_OD 开漏输出 </span><br><span class="line">（<span class="number">6</span>）GPIO_Mode_Out_PP 推挽输出 </span><br><span class="line">（<span class="number">7</span>）GPIO_Mode_AF_OD 复用开漏输出 </span><br><span class="line">（<span class="number">8</span>）GPIO_Mode_AF_PP 复用推挽输出</span><br></pre></td></tr></table></figure><p>那么这8种工作模式具体的含义是什么呢？</p><p>浮空,顾名思义就是浮在空中,上面用绳子一拉就上去了,下面用绳子一拉就沉下去了.  </p><p>开漏,就等于输出口接了个NPN三极管,并且只接了e,b. c极 是开路的,你可以接一个电阻到3.3V,也可以接一个电阻到5V,这样,在输出1的时候,就可以是5V电压,也可以是3.3V电压了.但是不接电阻上拉的时候,这个输出高就不能实现了.  </p><p>推挽,就是有推有拉,任何时候IO口的电平都是确定的,不需要外接上拉或者下拉电阻. </p><hr><p><img src="//wangzipai.github.io/posts/33448/gpio.png" alt="gpio"></p><p>推挽电路是两个参数相同的三极管或MOSFET,以推挽方式存在于电路中,各负责正负半周的波形放大任务,电路工作时，两只对称的功率开关管每次只有一个导通，所以导通损耗小、效率高。输出既可以向负载灌电流，也可以从负载抽取电流。推拉式输出级既提高电路的负载能力，又提高开关速度。输出高电平的时候，P-MOS管导通。低电平时，N-MOS管导通。两个管子轮流导通，一个负责灌电流，一个负责拉电流 ，使其负载能力和开关速度都比普通的方式有很大的提高。推挽输出的供电平为0伏，高电平为3.3伏。</p><p>开漏输出:输出端相当于三极管的集电极. 要得到高电平状态需要上拉电阻才行. 适合于做电流型的驱动,其吸收电流的能力相对强(一般20ma以内)。如果我们控制输出为0，低电平，则N-MOS管导通，使输出接地。若控制输出为1，则既不输出高电平，也不输出低电平，为高阻态，需外接一个上拉电阻。他具有“线与”特性，即很多个开漏模式引脚连接到一起时，只有当所有引脚都输出高阻态，才由上拉电阻提供高电平，此高电平的电压为外部上拉电阻所接电源的电压。若其中一个引脚为低电平，那线路就相当于短路接地，使得整个线路都为低电平，0伏。<br>开漏形式的电路有以下几个特点： </p><ol><li>利用外部电路的驱动能力，减少IC内部的驱动。当IC内部MOSFET导通时，驱动电流是从外部的VCC流经R pull-up ，MOSFET到GND。IC内部仅需很下的栅极驱动电流。 </li><li>一般来说，开漏是用来连接不同电平的器件，匹配电平用的，因为开漏引脚不连接外部的上拉电阻时，只能输出低电平，如果需要同时具备输出高电平的功能，则需要接上拉电阻，很好的一个优点是通过改变上拉电源的电压，便可以改变传输电平。比如加上上拉电阻就可以提供TTL/CMOS电平输出等。（上拉电阻的阻值决定了逻辑电平转换的沿的速度 。阻值越大，速度越低功耗越小，所以负载电阻的选择要兼顾功耗和速度。） </li><li>OPEN-DRAIN提供了灵活的输出方式，但是也有其弱点，就是带来上升沿的延时。因为上升沿是通过外接上拉无源电阻对负载充电，所以当电阻选择小时延时就小，但功耗大；反之延时大功耗小。所以如果对延时有要求，则建议用下降沿输出。 </li><li>可以将多个开漏输出的Pin，连接到一条线上。通过一只上拉电阻，在不增加任何器件的情况下，形成“与逻辑”关系。这也是I2C，SMBus等总线判断总线占用状态的原理。                                                                                                               补充：什么是“线与”？：<br> 在一个结点(线)上, 连接一个上拉电阻到电源 VCC 或 VDD 和 n 个 NPN 或 NMOS 晶体管的集电极 C 或漏极 D, 这些晶体管的发射极 E 或源极 S 都接到地线上, 只要有一个晶体管饱和, 这个结点(线)就被拉到地线电平上. 因为这些晶体管的基极注入电流(NPN)或栅极加上高电平(NMOS),晶体管就会饱和, 所以这些基极或栅极对这个结点(线)的关系是或非 NOR 逻辑. 如果这个结点后面加一个反相器, 就是或 OR 逻辑.<br> 其实可以简单的理解为：在所有引脚连在一起时，外接一上拉电阻，如果有一个引脚输出为逻辑0，相当于接地，与之并联的回路“相当于被一根导线短路”，所以外电路逻辑电平便为0，只有都为高电平时，与的结果才为逻辑1。 </li></ol><p>推挽输出模式一般应用在输出电平为0和3.3伏的场合。而开漏输出模式一般应用在电平不匹配的场合，如需要输出5伏的电压。</p><p>浮空输入模式在芯片内部既没有接上拉，也没有接下拉电阻，经由触发器输入。配置成这个模式直接用电压表测量其引脚电压为1点几伏，是个不确定值。由于其输入阻抗较大，一般把这种模式用于标准的通信协议如I2C，USART的接收端。由于浮空输入一般多用于外部按键输入，浮空输入状态下，IO的电平状态是不确定的，完全由外部输入决定，如果在该引脚悬空的情况下，读取该端口的电平是不确定的。 </p><p>上拉输入/下拉输入/模拟输入：这几个概念很好理解，从字面便能轻易读懂。 若配置为上拉输入模式，默认情况下（GPIO引脚无输入），读取的GPIO引脚数据为1，高电平。下拉输入模式则相反，在默认情况下其引脚数据为0，低电平。</p><p>模拟输入模式则关闭了施密特触发器，不接上下拉电阻，经由另一线路把电压信号传送到片上外设模块。如传送至ADC模块，由ADC模块采集电压信号。所以采用ADC外设的时候，必须使用模拟输入模式。</p><p>复用开漏输出、复用推挽输出：可以理解为GPIO口被用作第二功能时的配置情况（即并非作为通用IO口使用）<br>最后总结下使用情况：<br>在STM32中选用IO模式<br>（1） 浮空输入_IN_FLOATING ——浮空输入，可以做KEY识别，RX1<br>（2）带上拉输入_IPU——IO内部上拉电阻输入<br>（3）带下拉输入_IPD—— IO内部下拉电阻输入<br>（4） 模拟输入_AIN ——应用ADC模拟输入，或者低功耗下省电<br>（5）开漏输出_OUT_OD ——IO输出0接GND，IO输出1，悬空，需要外接上拉电阻，才能实现输出高电平。当输出为1时，IO口的状态由上拉电阻拉高电平，但由于是开漏输出模式，这样IO口也就可以由外部电路改变为低电平或不变。可以读IO输入电平变化，实现C51的IO双向功能<br>（6）推挽输出_OUT_PP ——IO输出0-接GND， IO输出1 -接VCC，读输入值是未知的<br>（7）复用功能的推挽输出_AF_PP ——片内外设功能（I2C的SCL,SDA）<br>（8）复用功能的开漏输出_AF_OD——片内外设功能（TX1,MOSI,MISO.SCK.SS）<br>STM32设置实例：<br>（1）模拟I2C使用开漏输出_OUT_OD，接上拉电阻，能够正确输出0和1；读值时先GPIO_SetBits(GPIOB, GPIO_Pin_0)；拉高，然后可以读IO的值；使用GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0)；<br>（2）如果是无上拉电阻，IO默认是高电平；需要读取IO的值，可以使用带上拉输入_IPU和浮空输入_IN_FLOATING和开漏输出_OUT_OD；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;stm32 I/O口有8种工作模式，分别为4种输入模式和4种输出模式：&lt;/p&gt;
&lt;p&gt;4种输入模式：&lt;/p&gt;
&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;（&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;）GPIO_Mode_AIN 模拟输入 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;）GPIO_Mode_IN_FLOATING 浮空输入 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;）GPIO_Mode_IPD 下拉输入 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;）GPIO_Mode_IPU 上拉输入&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="stm32" scheme="https://wangzipai.github.io/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>断言</title>
    <link href="https://wangzipai.github.io/posts/58240/"/>
    <id>https://wangzipai.github.io/posts/58240/</id>
    <published>2019-03-17T15:10:42.000Z</published>
    <updated>2019-03-20T11:40:09.199Z</updated>
    
    <content type="html"><![CDATA[<p>​         阅读GPIO_Init源码时，发现断言函数 assert，如下：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* Check the parameters */</span><br><span class="line">assert_param(<span class="name">IS_GPIO_ALL_PERIPH</span>(<span class="name">GPIOx</span>))<span class="comment">;</span></span><br><span class="line">assert_param(<span class="name">IS_GPIO_MODE</span>(<span class="name">GPIO_InitStruct-&gt;GPIO_Mode</span>))<span class="comment">;</span></span><br><span class="line">assert_param(<span class="name">IS_GPIO_PIN</span>(<span class="name">GPIO_InitStruct-&gt;GPIO_Pin</span>))<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>​        为了能深入的理解断言在程序运行中的作用，我尝试对断言进行总结。在使用C语言编写工程代码时，我们总会对某种假设条件进行检查，断言就是用于在代码中捕捉这些假设，可以将断言看作是异常处理的一种高级形式。然而assert并不仅仅是一个报错函数，事实上它还是一个宏。</p><a id="more"></a><p>​       断言表示为一些布尔表达式，程序员相信在程序中的某个特定点该表达式值为真。可以在任何时候启用和禁用断言验证，因此可以在测试时启用断言，而在部署时禁用断言。同样，程序投入运行后，最终用户在遇到问题时可以重新起用断言。它可以快速发现并定位软件问题，同时对系统错误进行自动报警。断言可以对在系统中隐藏很深，用其它手段极难发现的问题可以用断言来进行定位，从而缩短软件问题定位时间，提高系统的可测性。实际应用时，可根据具体情况灵活地设计断言。</p><p>​        原型定义：void assert( int expression );</p><p>​       assert宏的原型定义在&lt;assert.h&gt;中，其作用是先计算表达式 expression ，如果expression的值为假（即为0），那么它首先打印一条出错信息，然后通过调用abort 来终止程序运行。下面来看看一段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   i=<span class="number">1</span>;</span><br><span class="line">   assert(i++);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       因为我们给定的i初始值为1，所以使用assert(i++);语句的时候不会出现错误，进而执行了i++，所以其后的打印语句输出值为2。如果我们把i的初始值改为0，那么就回出现如下错误。<br>Assertion failed: i++, file E:\fdsa\assert2.cpp, line 8<br>Press any key to continue</p><p>​       断言语句不是永远会执行，可以屏蔽也可以启用，这就要求assert不管是在屏蔽还是启用的情况下都不能对我们本身代码的功能有所影响，这样的话刚才我们在代码中使用了一句assert(i++);是不妥的，因为我们一旦禁用了assert，i++的语句就得不到执行，对于接下来i值的使用就会出现问题了，所以对于这样的语句我们应该是要分开来实现，写出如下两句来替代， assert(i); i++;，所以这就对于断言的使用有了相应的要求，那么我们一般在什么情况下使用断言呢？主要体现在一下几个方面：</p><p>​           1.可以在预计正常情况下程序不会到达的地方放置断言。（如assert (0);）</p><p>​        2.使用断言测试方法执行的前置条件和后置条件 。</p><p>​        3.使用断言检查类的不变状态，确保任何情况下，某个变量的状态必须满足。（如某个变量的变化范围）</p><p>​       对于上面的前置条件和后置条件可能有的读者还不是很了解，那么看看下面的解释你就明白了。</p><p>​        1.前置条件断言：代码执行之前必须具备的特性</p><p>​        2.后置条件断言：代码执行之后必须具备的特性</p><p>​        3.前后不变断言：代码执行前后不能变化的特性</p><p>​       当然在使用的断言的过程中会有一些我们应该注意的事项和养成一些良好的习惯，如：</p><p>​        1.每个assert只检验一个条件，因为同时检验多个条件时，如果断言失败，我们就无法直观的判断是哪个条件失败</p><p>​        2.不能使用改变环境的语句，就像我们上面的代码改变了i变量，在实际编写代码的过程中是不能这样做的</p><p>​        3.assert和后面的语句应空一行，以形成逻辑和视觉上的一致感，也算是一种良好的编程习惯吧，让编写的代码有一种视觉上的美感</p><p>​        4.有的地方，assert不能代替条件过滤</p><p>​        5.放在函数参数的入口处检查传入参数的合法性</p><p>​        6.断言语句不可以有任何边界效应</p><p>​        7.频繁的调用会极大的影响程序的性能，增加额外的开销。所以在调试结束后，可以通过在包含#include 的语句之前插入 #define NDEBUG 来禁用assert调用。</p><p>​       现在回到GPIO_Init源码中，通过以下2段代码我们可以更好的理解断言在实际开发中的应用</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert_param(<span class="name">IS_GPIO_ALL_PERIPH</span>(<span class="name">GPIOx</span>))<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define IS_GPIO_ALL_PERIPH(<span class="name">PERIPH</span>) (((<span class="name">PERIPH</span>) == GPIOA) || \</span><br><span class="line">                                    ((<span class="name">PERIPH</span>) == GPIOB) || \</span><br><span class="line">                                    ((<span class="name">PERIPH</span>) == GPIOC) || \</span><br><span class="line">                                    ((<span class="name">PERIPH</span>) == GPIOD) || \</span><br><span class="line">                                    ((<span class="name">PERIPH</span>) == GPIOE) || \</span><br><span class="line">                                    ((<span class="name">PERIPH</span>) == GPIOF) || \</span><br><span class="line">                                    ((<span class="name">PERIPH</span>) == GPIOG))</span><br></pre></td></tr></table></figure><p>​      由第二段代码的含参宏，确定传入的参数是否符合要求，这种用法为上述的前置条件断言。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​         阅读GPIO_Init源码时，发现断言函数 assert，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/* Check the parameters */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert_param(&lt;span class=&quot;name&quot;&gt;IS_GPIO_ALL_PERIPH&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;GPIOx&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert_param(&lt;span class=&quot;name&quot;&gt;IS_GPIO_MODE&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;GPIO_InitStruct-&amp;gt;GPIO_Mode&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert_param(&lt;span class=&quot;name&quot;&gt;IS_GPIO_PIN&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;GPIO_InitStruct-&amp;gt;GPIO_Pin&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​        为了能深入的理解断言在程序运行中的作用，我尝试对断言进行总结。在使用C语言编写工程代码时，我们总会对某种假设条件进行检查，断言就是用于在代码中捕捉这些假设，可以将断言看作是异常处理的一种高级形式。然而assert并不仅仅是一个报错函数，事实上它还是一个宏。&lt;/p&gt;
    
    </summary>
    
    
      <category term="stm32" scheme="https://wangzipai.github.io/tags/stm32/"/>
    
      <category term="C语言" scheme="https://wangzipai.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wangzipai.github.io/posts/16107/"/>
    <id>https://wangzipai.github.io/posts/16107/</id>
    <published>2019-03-17T08:09:04.181Z</published>
    <updated>2019-03-25T11:37:31.480Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本来想把这个初始化的界面删了，后来想想算了，干脆用这个界面来记录建立博客的经过，方便以后参考。</p><p>由于这两天的建站，严重影响自学的进度，就主要记录一些采过的坑吧。</p><a id="more"></a><h3 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p><a href="http://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">使用Hexo+Github一步步搭建属于自己的博客（基础）</a></p><p><a href="http://www.cnblogs.com/fengxiongZz/p/7707568.html" target="_blank" rel="noopener">使用Hexo+Github一步步搭建属于自己的博客（进阶）</a></p><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化</a></p><p><a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><h4 id="博文压缩"><a href="#博文压缩" class="headerlink" title="博文压缩"></a>博文压缩</h4><h5 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h5><p>在站点的根目录下执行以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> gulp -g</span><br><span class="line">$ npm <span class="keyword">install</span> gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>进入博客根目录，新建gulpfile.js文件，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="comment">// 压缩 public 目录 css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public 目录 html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: <span class="literal">true</span>,</span><br><span class="line">         minifyJS: <span class="literal">true</span>,</span><br><span class="line">         minifyCSS: <span class="literal">true</span>,</span><br><span class="line">         minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [</span><br><span class="line">    <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>生成博文是执行 <code>hexo g &amp;&amp; gulp</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 public 目录中的静态资源文件进行压缩。</p><hr><h5 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h5><p>然而，运行 <code>hexo g &amp;&amp; gulp</code> 时，会出现以下错误：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">assert.<span class="symbol">js:</span><span class="number">350</span></span><br><span class="line">    throw err;</span><br><span class="line">    ^</span><br><span class="line"></span><br><span class="line">AssertionError [ERR_ASSERTION]: Task function must be specified</span><br><span class="line">    at Gulp.set [<span class="keyword">as</span> _setTask] (<span class="symbol">D:</span>\nodejs\blog\node_modules\undertaker\<span class="class"><span class="keyword">lib</span>\<span class="title">set</span>-<span class="title">task</span>.<span class="title">js</span>:10:3)</span></span><br><span class="line">    at Gulp.task (<span class="symbol">D:</span>\nodejs\blog\node_modules\undertaker\<span class="class"><span class="keyword">lib</span>\<span class="title">task</span>.<span class="title">js</span>:13:8)</span></span><br><span class="line">    at Object.&lt;anonymous&gt; (<span class="symbol">D:</span>\nodejs\blog\gulpfile.<span class="symbol">js:</span><span class="number">31</span>:<span class="number">6</span>)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.<span class="symbol">js:</span><span class="number">701</span>:<span class="number">30</span>)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.<span class="symbol">js:</span><span class="number">712</span>:<span class="number">10</span>)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.<span class="symbol">js:</span><span class="number">600</span>:<span class="number">32</span>)</span><br><span class="line">    at tryModuleLoad (internal/modules/cjs/loader.<span class="symbol">js:</span><span class="number">539</span>:<span class="number">12</span>)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.<span class="symbol">js:</span><span class="number">531</span>:<span class="number">3</span>)</span><br><span class="line">    at Module.<span class="keyword">require</span> (internal/modules/cjs/loader.<span class="symbol">js:</span><span class="number">637</span>:<span class="number">17</span>)</span><br><span class="line">    at <span class="keyword">require</span> (internal/modules/cjs/helpers.<span class="symbol">js:</span><span class="number">22</span>:<span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>gulp项目需要全局安装gulp和项目内安装gulp，通过 gulp -v 查看全局gulp 和本地项目的gulp版本：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gulp -v</span><br><span class="line">[22:12:41] <span class="keyword">CLI</span> <span class="keyword">version</span> 2.0.1</span><br><span class="line">[22:12:41] <span class="keyword">Local</span> <span class="keyword">version</span> 4.0.0</span><br></pre></td></tr></table></figure><p>查看项目里的D:\nodejs\blog\package.json文件，可以看到gulp版本</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.26.3"</span>,</span><br><span class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="string">"del"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">    <span class="string">"gulp"</span>: <span class="string">"^4.0.1"</span>,</span><br><span class="line">    <span class="string">"gulp-babel"</span>: <span class="string">"^8.0.0"</span>,</span><br><span class="line">    <span class="string">"gulp-clean-css"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">    <span class="string">"gulp-htmlclean"</span>: <span class="string">"^2.7.22"</span>,</span><br><span class="line">    <span class="string">"gulp-htmlmin"</span>: <span class="string">"^5.0.1"</span>,</span><br><span class="line">    <span class="string">"gulp-imagemin"</span>: <span class="string">"^5.0.3"</span>,</span><br><span class="line">    <span class="string">"gulp-uglify"</span>: <span class="string">"^3.0.2"</span>,</span><br><span class="line">    <span class="string">"run-sequence"</span>: <span class="string">"^2.2.1"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>将 <code>&quot;gulp&quot;: &quot;^4.0.1&quot;,</code>改成 <code>&quot;gulp&quot;: &quot;^2.0.1&quot;,</code>发现出现错误<code>Unsupported gulp version</code></p><p>将版本号从gulp2改成改成gulp3<code>&quot;gulp&quot;: &quot;^2.0.1&quot;</code>，成功。</p><h4 id="鼠标飘字特效"><a href="#鼠标飘字特效" class="headerlink" title="鼠标飘字特效"></a>鼠标飘字特效</h4><h5 id="教程-1"><a href="#教程-1" class="headerlink" title="教程"></a>教程</h5><p>新建一个js：*/themes/next/source/js/src/jiazhiguan.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 鼠标飘字*/</span></span><br><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(document).ready(<span class="function"><span class="keyword">function</span><span class="params">($)</span> </span>&#123;</span><br><span class="line">$(<span class="string">"body"</span>).click(<span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="keyword">Array</span>(<span class="string">"富强"</span>, <span class="string">"民主"</span>, <span class="string">"文明"</span>, <span class="string">"和谐"</span>, <span class="string">"自由"</span>, <span class="string">"平等"</span>, <span class="string">"公正"</span> ,<span class="string">"法治"</span>, <span class="string">"爱国"</span>, <span class="string">"敬业"</span>, <span class="string">"诚信"</span>, <span class="string">"友善"</span>);</span><br><span class="line"><span class="keyword">var</span> $i = $(<span class="string">"&lt;span/&gt;"</span>).text(a[a_idx]);</span><br><span class="line">a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line"><span class="keyword">var</span> x = e.pageX,</span><br><span class="line">y = e.pageY;</span><br><span class="line">$i.css(&#123;</span><br><span class="line"><span class="string">"z-index"</span>: <span class="number">999999999999999999999999999999999999999999999999999999999999999999999</span>,</span><br><span class="line"><span class="string">"top"</span>: y - <span class="number">20</span>,</span><br><span class="line"><span class="string">"left"</span>: x,</span><br><span class="line"><span class="string">"position"</span>: <span class="string">"absolute"</span>,</span><br><span class="line"><span class="string">"font-weight"</span>: <span class="string">"bold"</span>,</span><br><span class="line"><span class="string">"color"</span>: <span class="string">"#a40000"</span></span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"body"</span>).append($i);</span><br><span class="line">$i.animate(&#123;</span><br><span class="line"><span class="string">"top"</span>: y - <span class="number">180</span>,</span><br><span class="line"><span class="string">"opacity"</span>: <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="number">1500</span>,</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$i.remove();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在<code>Blog\themes\next\layout\_layout.swig</code>文件的最下方，<code>&lt;/body&gt;</code>前面添加<code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/jiazhiguan.js&quot;&gt;&lt;/script&gt;</code>。</p><hr><h5 id="填坑-1"><a href="#填坑-1" class="headerlink" title="填坑"></a>填坑</h5><p>由于ANSI编码无中文字符，所以出现乱码。将编码从ANSI改成utf-8编码。</p><p>用记事本打开这个1.html，把这文档另存到原来的目录，覆盖自己，只是编码要从ANSI改成utf-8。完成。</p><h4 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h4><p>打开<code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code>文件,在pace段后面插入这样一段代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'密码错误！'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (history.length === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    location.replace(<span class="string">"http://xxxxxxx.xxx"</span>); <span class="comment">// 这里替换成你的首页</span></span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">                    history.back();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在文章上写成类似这样：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 断言</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - C语言</span><br><span class="line">  - stm32</span><br><span class="line">abbrlink: 58240</span><br><span class="line">date: 2019<span class="string">-03</span><span class="string">-17</span> 23:10:42</span><br><span class="line">password: ********</span><br></pre></td></tr></table></figure><h4 id="添加网页标题崩溃欺骗搞怪特效"><a href="#添加网页标题崩溃欺骗搞怪特效" class="headerlink" title="添加网页标题崩溃欺骗搞怪特效"></a>添加网页标题崩溃欺骗搞怪特效</h4><p>创建js文件</p><p>在 <code>next\source\js\src</code> 文件夹下创建 <code>crash_cheat.js</code>，添加代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line"> <span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title;</span><br><span class="line"> <span class="keyword">var</span> titleTime;</span><br><span class="line"> <span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">         $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/img/TEP.ico"</span>);</span><br><span class="line">         <span class="built_in">document</span>.title = <span class="string">'╭(°A°`)╮ 页面崩溃啦 ~'</span>;</span><br><span class="line">         clearTimeout(titleTime);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">         $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/favicon.ico"</span>);</span><br><span class="line">         <span class="built_in">document</span>.title = <span class="string">'(ฅ&gt;ω&lt;*ฅ) 噫又好了~'</span> + OriginTitle;</span><br><span class="line">         titleTime = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="built_in">document</span>.title = OriginTitle;</span><br><span class="line">         &#125;, <span class="number">2000</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p>在 <code>next\layout\_layout.swig</code> 文件中，添加引用（注：在<code>swig</code>末尾添加）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--崩溃欺骗--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/crash_cheat.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="待续。。"><a href="#待续。。" class="headerlink" title="待续。。"></a>待续。。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本来想把这个初始化的界面删了，后来想想算了，干脆用这个界面来记录建立博客的经过，方便以后参考。&lt;/p&gt;
&lt;p&gt;由于这两天的建站，严重影响自学的进度，就主要记录一些采过的坑吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://wangzipai.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
